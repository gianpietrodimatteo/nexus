# Project Purpose

One **Next.js 14** SPA hosting both _Admin_ and _Client_ dashboards for the Nexus platform.  
Tech stack: **React 19, TypeScript (strict), Tailwind + shadcnâ€‘ui, tRPC, Prisma, PostgreSQL, NextAuth**.

--

Do not edit dependencies, I will add them myself.
Do not try to restart the Typescript server.
Generally speaking, I will run commands.

---

## Architecture Constraints

| Area | Implementation |
|------|------------|
| **Authentication** | NextAuth.js v4 with email/password. Roles: ADMIN, SE, CLIENT. |
| **Database** | Single PostgreSQL with automatic RBAC filtering via Prisma extensions. |
| **Platform** | Desktop web SPA with nested layouts. No mobile responsive needed. |
| **Data Security** | Automatic organization-scoped queries via RBAC guard middleware. |
| **Loading States** | Skeleton components for structure, Progress for tracked operations. |

**Development Priorities**: 1) Functionality 2) Code quality 3) Design accuracy

---

## File Organization

| Area | Location | Rule |
|------|----------|------|
| **Pages** | `src/app/(dashboard)/admin/*` & `src/app/(dashboard)/client/*` | Business logic, tRPC calls, state management |
| **Page Components** | `src/app/[area]/[page]/components/*` | Page-specific UI components (pure presentation) |
| **Shared Components** | `src/components/*` | Only when used by 2+ pages in different areas |
| **tRPC Routers** | `src/server/trpc/routes/*.router.ts` | Domain-based (users, clients, workflows), not role-based |
| **Schemas** | `src/schemas/*.ts` | Zod validation shared between frontend/backend |
| **Import aliases** | Use `@/` always; never relative paths like `../../../` |

---

## Code Style

* **Formatter**: `prettier` _(autoâ€‘run via Cursor on save)_  
* **Linter**: `eslint --max-warnings 0`  
* **TypeScript**: `strict: true`, `noImplicitAny`, `exactOptionalPropertyTypes`
* **Naming**: `PascalCase` for React components, `camelCase` for functions/vars, `UPPER_SNAKE_CASE` for envs
* **Component Pattern**: Business logic in pages, pure UI in page-specific components
* **RBAC**: Use `isAdmin`, `isSE`, `isClient` middlewares from `_helpers.ts`
* **Prisma**: RBAC guard automatically filters queries; no manual `organizationId` needed

---

## Environment & Database

* **Local dev** â†’ `.env.development` *(NOT committed)*  
* **Migrations** via `prisma migrate dev` (local) & `prisma migrate deploy` (CI/prod)
* **RBAC Guard** automatically scopes all queries to user's allowed organizations
* **Access control** enforced at database level via Prisma Client Extensions

---

## SPA Architecture

* **Nested Layouts**: Persistent shells (`admin/layout.tsx`, `client/layout.tsx`) stay mounted
* **Loading States**: Use `loading.tsx` files + skeleton components for instant feedback
* **Navigation**: Active state via `useSelectedLayoutSegments()` 
* **Component Hierarchy**: Page â†’ Page Components â†’ shadcn/ui base components

---

## ðŸ“š Documentation

* Complete architecture docs in `/docs/*.md`
* This `.cursorrules` is the style/convention reference

<!-- End of .cursorrules -->
